// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_packet_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_packet_2eproto



#pragma warning(disable: 4946)


#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)


#ifdef USE_PROTOBUF_EXPORT
#   ifndef VIC_PROTOBUF_EXPORT
#       ifdef _PROTOBUF_EXPORT
#           define VIC_PROTOBUF_EXPORT __declspec(dllexport)
#       else
#           define VIC_PROTOBUF_EXPORT __declspec(dllimport)
#       endif
#   endif
#else
#   ifndef VIC_PROTOBUF_EXPORT
#   define VIC_PROTOBUF_EXPORT
#   endif
#endif

#if PLATFORM_WINDOWS
#endif //PLATFORM_WINDOWS


#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_packet_2eproto VIC_PROTOBUF_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct VIC_PROTOBUF_EXPORT TableStruct_packet_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern VIC_PROTOBUF_EXPORT const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_packet_2eproto;
namespace PacketLib {
class GU_ECHO_RES;
class GU_ECHO_RESDefaultTypeInternal;
VIC_PROTOBUF_EXPORT extern GU_ECHO_RESDefaultTypeInternal _GU_ECHO_RES_default_instance_;
class UG_ECHO_REQ;
class UG_ECHO_REQDefaultTypeInternal;
VIC_PROTOBUF_EXPORT extern UG_ECHO_REQDefaultTypeInternal _UG_ECHO_REQ_default_instance_;
}  // namespace PacketLib
PROTOBUF_NAMESPACE_OPEN
template<> VIC_PROTOBUF_EXPORT ::PacketLib::GU_ECHO_RES* Arena::CreateMaybeMessage<::PacketLib::GU_ECHO_RES>(Arena*);
template<> VIC_PROTOBUF_EXPORT ::PacketLib::UG_ECHO_REQ* Arena::CreateMaybeMessage<::PacketLib::UG_ECHO_REQ>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace PacketLib {

enum PACKET_ID : int {
  PACKET_ID_NONE = 0,
  PACKET_ID_UG_ECHO_REQ = 1,
  PACKET_ID_GU_ECHO_RES = 101,
  PACKET_ID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PACKET_ID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
VIC_PROTOBUF_EXPORT bool PACKET_ID_IsValid(int value);
constexpr PACKET_ID PACKET_ID_MIN = PACKET_ID_NONE;
constexpr PACKET_ID PACKET_ID_MAX = PACKET_ID_GU_ECHO_RES;
constexpr int PACKET_ID_ARRAYSIZE = PACKET_ID_MAX + 1;

VIC_PROTOBUF_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PACKET_ID_descriptor();
template<typename T>
inline const std::string& PACKET_ID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PACKET_ID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PACKET_ID_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PACKET_ID_descriptor(), enum_t_value);
}
inline bool PACKET_ID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PACKET_ID* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PACKET_ID>(
    PACKET_ID_descriptor(), name, value);
}
// ===================================================================

class VIC_PROTOBUF_EXPORT UG_ECHO_REQ PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PacketLib.UG_ECHO_REQ) */ {
 public:
  inline UG_ECHO_REQ() : UG_ECHO_REQ(nullptr) {}
  virtual ~UG_ECHO_REQ();

  UG_ECHO_REQ(const UG_ECHO_REQ& from);
  UG_ECHO_REQ(UG_ECHO_REQ&& from) noexcept
    : UG_ECHO_REQ() {
    *this = ::std::move(from);
  }

  inline UG_ECHO_REQ& operator=(const UG_ECHO_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline UG_ECHO_REQ& operator=(UG_ECHO_REQ&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UG_ECHO_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UG_ECHO_REQ* internal_default_instance() {
    return reinterpret_cast<const UG_ECHO_REQ*>(
               &_UG_ECHO_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UG_ECHO_REQ& a, UG_ECHO_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(UG_ECHO_REQ* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UG_ECHO_REQ* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UG_ECHO_REQ* New() const final {
    return CreateMaybeMessage<UG_ECHO_REQ>(nullptr);
  }

  UG_ECHO_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UG_ECHO_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UG_ECHO_REQ& from);
  void MergeFrom(const UG_ECHO_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UG_ECHO_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PacketLib.UG_ECHO_REQ";
  }
  protected:
  explicit UG_ECHO_REQ(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_packet_2eproto);
    return ::descriptor_table_packet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEchoFieldNumber = 1,
  };
  // string echo = 1;
  void clear_echo();
  const std::string& echo() const;
  void set_echo(const std::string& value);
  void set_echo(std::string&& value);
  void set_echo(const char* value);
  void set_echo(const char* value, size_t size);
  std::string* mutable_echo();
  std::string* release_echo();
  void set_allocated_echo(std::string* echo);
  private:
  const std::string& _internal_echo() const;
  void _internal_set_echo(const std::string& value);
  std::string* _internal_mutable_echo();
  public:

  // @@protoc_insertion_point(class_scope:PacketLib.UG_ECHO_REQ)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr echo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packet_2eproto;
};
// -------------------------------------------------------------------

class VIC_PROTOBUF_EXPORT GU_ECHO_RES PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PacketLib.GU_ECHO_RES) */ {
 public:
  inline GU_ECHO_RES() : GU_ECHO_RES(nullptr) {}
  virtual ~GU_ECHO_RES();

  GU_ECHO_RES(const GU_ECHO_RES& from);
  GU_ECHO_RES(GU_ECHO_RES&& from) noexcept
    : GU_ECHO_RES() {
    *this = ::std::move(from);
  }

  inline GU_ECHO_RES& operator=(const GU_ECHO_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline GU_ECHO_RES& operator=(GU_ECHO_RES&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GU_ECHO_RES& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GU_ECHO_RES* internal_default_instance() {
    return reinterpret_cast<const GU_ECHO_RES*>(
               &_GU_ECHO_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GU_ECHO_RES& a, GU_ECHO_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(GU_ECHO_RES* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GU_ECHO_RES* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GU_ECHO_RES* New() const final {
    return CreateMaybeMessage<GU_ECHO_RES>(nullptr);
  }

  GU_ECHO_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GU_ECHO_RES>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GU_ECHO_RES& from);
  void MergeFrom(const GU_ECHO_RES& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GU_ECHO_RES* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PacketLib.GU_ECHO_RES";
  }
  protected:
  explicit GU_ECHO_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_packet_2eproto);
    return ::descriptor_table_packet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEchoFieldNumber = 1,
  };
  // string echo = 1;
  void clear_echo();
  const std::string& echo() const;
  void set_echo(const std::string& value);
  void set_echo(std::string&& value);
  void set_echo(const char* value);
  void set_echo(const char* value, size_t size);
  std::string* mutable_echo();
  std::string* release_echo();
  void set_allocated_echo(std::string* echo);
  private:
  const std::string& _internal_echo() const;
  void _internal_set_echo(const std::string& value);
  std::string* _internal_mutable_echo();
  public:

  // @@protoc_insertion_point(class_scope:PacketLib.GU_ECHO_RES)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr echo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packet_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UG_ECHO_REQ

// string echo = 1;
inline void UG_ECHO_REQ::clear_echo() {
  echo_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UG_ECHO_REQ::echo() const {
  // @@protoc_insertion_point(field_get:PacketLib.UG_ECHO_REQ.echo)
  return _internal_echo();
}
inline void UG_ECHO_REQ::set_echo(const std::string& value) {
  _internal_set_echo(value);
  // @@protoc_insertion_point(field_set:PacketLib.UG_ECHO_REQ.echo)
}
inline std::string* UG_ECHO_REQ::mutable_echo() {
  // @@protoc_insertion_point(field_mutable:PacketLib.UG_ECHO_REQ.echo)
  return _internal_mutable_echo();
}
inline const std::string& UG_ECHO_REQ::_internal_echo() const {
  return echo_.Get();
}
inline void UG_ECHO_REQ::_internal_set_echo(const std::string& value) {
  
  echo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UG_ECHO_REQ::set_echo(std::string&& value) {
  
  echo_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PacketLib.UG_ECHO_REQ.echo)
}
inline void UG_ECHO_REQ::set_echo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  echo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PacketLib.UG_ECHO_REQ.echo)
}
inline void UG_ECHO_REQ::set_echo(const char* value,
    size_t size) {
  
  echo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PacketLib.UG_ECHO_REQ.echo)
}
inline std::string* UG_ECHO_REQ::_internal_mutable_echo() {
  
  return echo_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UG_ECHO_REQ::release_echo() {
  // @@protoc_insertion_point(field_release:PacketLib.UG_ECHO_REQ.echo)
  return echo_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UG_ECHO_REQ::set_allocated_echo(std::string* echo) {
  if (echo != nullptr) {
    
  } else {
    
  }
  echo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), echo,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PacketLib.UG_ECHO_REQ.echo)
}

// -------------------------------------------------------------------

// GU_ECHO_RES

// string echo = 1;
inline void GU_ECHO_RES::clear_echo() {
  echo_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GU_ECHO_RES::echo() const {
  // @@protoc_insertion_point(field_get:PacketLib.GU_ECHO_RES.echo)
  return _internal_echo();
}
inline void GU_ECHO_RES::set_echo(const std::string& value) {
  _internal_set_echo(value);
  // @@protoc_insertion_point(field_set:PacketLib.GU_ECHO_RES.echo)
}
inline std::string* GU_ECHO_RES::mutable_echo() {
  // @@protoc_insertion_point(field_mutable:PacketLib.GU_ECHO_RES.echo)
  return _internal_mutable_echo();
}
inline const std::string& GU_ECHO_RES::_internal_echo() const {
  return echo_.Get();
}
inline void GU_ECHO_RES::_internal_set_echo(const std::string& value) {
  
  echo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GU_ECHO_RES::set_echo(std::string&& value) {
  
  echo_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PacketLib.GU_ECHO_RES.echo)
}
inline void GU_ECHO_RES::set_echo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  echo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PacketLib.GU_ECHO_RES.echo)
}
inline void GU_ECHO_RES::set_echo(const char* value,
    size_t size) {
  
  echo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PacketLib.GU_ECHO_RES.echo)
}
inline std::string* GU_ECHO_RES::_internal_mutable_echo() {
  
  return echo_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GU_ECHO_RES::release_echo() {
  // @@protoc_insertion_point(field_release:PacketLib.GU_ECHO_RES.echo)
  return echo_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GU_ECHO_RES::set_allocated_echo(std::string* echo) {
  if (echo != nullptr) {
    
  } else {
    
  }
  echo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), echo,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PacketLib.GU_ECHO_RES.echo)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace PacketLib

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::PacketLib::PACKET_ID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PacketLib::PACKET_ID>() {
  return ::PacketLib::PACKET_ID_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_packet_2eproto
