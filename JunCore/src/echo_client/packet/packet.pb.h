// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_packet_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_packet_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_packet_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_packet_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_packet_2eproto;
namespace PacketLib {
class GU_ECHO_RES;
struct GU_ECHO_RESDefaultTypeInternal;
extern GU_ECHO_RESDefaultTypeInternal _GU_ECHO_RES_default_instance_;
class UG_ECHO_REQ;
struct UG_ECHO_REQDefaultTypeInternal;
extern UG_ECHO_REQDefaultTypeInternal _UG_ECHO_REQ_default_instance_;
}  // namespace PacketLib
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace PacketLib {
enum PACKET_ID : int {
  PACKET_ID_NONE = 0,
  PACKET_ID_UG_ECHO_REQ = 1,
  PACKET_ID_GU_ECHO_RES = 101,
  PACKET_ID_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  PACKET_ID_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool PACKET_ID_IsValid(int value);
extern const uint32_t PACKET_ID_internal_data_[];
constexpr PACKET_ID PACKET_ID_MIN = static_cast<PACKET_ID>(0);
constexpr PACKET_ID PACKET_ID_MAX = static_cast<PACKET_ID>(101);
constexpr int PACKET_ID_ARRAYSIZE = 101 + 1;
const ::google::protobuf::EnumDescriptor*
PACKET_ID_descriptor();
template <typename T>
const std::string& PACKET_ID_Name(T value) {
  static_assert(std::is_same<T, PACKET_ID>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to PACKET_ID_Name().");
  return ::google::protobuf::internal::NameOfEnum(PACKET_ID_descriptor(), value);
}
inline bool PACKET_ID_Parse(absl::string_view name, PACKET_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PACKET_ID>(
      PACKET_ID_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class UG_ECHO_REQ final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PacketLib.UG_ECHO_REQ) */ {
 public:
  inline UG_ECHO_REQ() : UG_ECHO_REQ(nullptr) {}
  ~UG_ECHO_REQ() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UG_ECHO_REQ(::google::protobuf::internal::ConstantInitialized);

  inline UG_ECHO_REQ(const UG_ECHO_REQ& from)
      : UG_ECHO_REQ(nullptr, from) {}
  UG_ECHO_REQ(UG_ECHO_REQ&& from) noexcept
    : UG_ECHO_REQ() {
    *this = ::std::move(from);
  }

  inline UG_ECHO_REQ& operator=(const UG_ECHO_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline UG_ECHO_REQ& operator=(UG_ECHO_REQ&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UG_ECHO_REQ& default_instance() {
    return *internal_default_instance();
  }
  static inline const UG_ECHO_REQ* internal_default_instance() {
    return reinterpret_cast<const UG_ECHO_REQ*>(
               &_UG_ECHO_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UG_ECHO_REQ& a, UG_ECHO_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(UG_ECHO_REQ* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UG_ECHO_REQ* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UG_ECHO_REQ* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UG_ECHO_REQ>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UG_ECHO_REQ& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UG_ECHO_REQ& from) {
    UG_ECHO_REQ::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UG_ECHO_REQ* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "PacketLib.UG_ECHO_REQ";
  }
  protected:
  explicit UG_ECHO_REQ(::google::protobuf::Arena* arena);
  UG_ECHO_REQ(::google::protobuf::Arena* arena, const UG_ECHO_REQ& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEchoFieldNumber = 1,
  };
  // string echo = 1;
  void clear_echo() ;
  const std::string& echo() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_echo(Arg_&& arg, Args_... args);
  std::string* mutable_echo();
  PROTOBUF_NODISCARD std::string* release_echo();
  void set_allocated_echo(std::string* value);

  private:
  const std::string& _internal_echo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_echo(
      const std::string& value);
  std::string* _internal_mutable_echo();

  public:
  // @@protoc_insertion_point(class_scope:PacketLib.UG_ECHO_REQ)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      34, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr echo_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_packet_2eproto;
};// -------------------------------------------------------------------

class GU_ECHO_RES final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PacketLib.GU_ECHO_RES) */ {
 public:
  inline GU_ECHO_RES() : GU_ECHO_RES(nullptr) {}
  ~GU_ECHO_RES() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GU_ECHO_RES(::google::protobuf::internal::ConstantInitialized);

  inline GU_ECHO_RES(const GU_ECHO_RES& from)
      : GU_ECHO_RES(nullptr, from) {}
  GU_ECHO_RES(GU_ECHO_RES&& from) noexcept
    : GU_ECHO_RES() {
    *this = ::std::move(from);
  }

  inline GU_ECHO_RES& operator=(const GU_ECHO_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline GU_ECHO_RES& operator=(GU_ECHO_RES&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GU_ECHO_RES& default_instance() {
    return *internal_default_instance();
  }
  static inline const GU_ECHO_RES* internal_default_instance() {
    return reinterpret_cast<const GU_ECHO_RES*>(
               &_GU_ECHO_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GU_ECHO_RES& a, GU_ECHO_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(GU_ECHO_RES* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GU_ECHO_RES* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GU_ECHO_RES* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GU_ECHO_RES>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GU_ECHO_RES& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GU_ECHO_RES& from) {
    GU_ECHO_RES::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GU_ECHO_RES* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "PacketLib.GU_ECHO_RES";
  }
  protected:
  explicit GU_ECHO_RES(::google::protobuf::Arena* arena);
  GU_ECHO_RES(::google::protobuf::Arena* arena, const GU_ECHO_RES& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEchoFieldNumber = 1,
  };
  // string echo = 1;
  void clear_echo() ;
  const std::string& echo() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_echo(Arg_&& arg, Args_... args);
  std::string* mutable_echo();
  PROTOBUF_NODISCARD std::string* release_echo();
  void set_allocated_echo(std::string* value);

  private:
  const std::string& _internal_echo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_echo(
      const std::string& value);
  std::string* _internal_mutable_echo();

  public:
  // @@protoc_insertion_point(class_scope:PacketLib.GU_ECHO_RES)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      34, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr echo_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_packet_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// UG_ECHO_REQ

// string echo = 1;
inline void UG_ECHO_REQ::clear_echo() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.echo_.ClearToEmpty();
}
inline const std::string& UG_ECHO_REQ::echo() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PacketLib.UG_ECHO_REQ.echo)
  return _internal_echo();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UG_ECHO_REQ::set_echo(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.echo_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:PacketLib.UG_ECHO_REQ.echo)
}
inline std::string* UG_ECHO_REQ::mutable_echo() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_echo();
  // @@protoc_insertion_point(field_mutable:PacketLib.UG_ECHO_REQ.echo)
  return _s;
}
inline const std::string& UG_ECHO_REQ::_internal_echo() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.echo_.Get();
}
inline void UG_ECHO_REQ::_internal_set_echo(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.echo_.Set(value, GetArena());
}
inline std::string* UG_ECHO_REQ::_internal_mutable_echo() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.echo_.Mutable( GetArena());
}
inline std::string* UG_ECHO_REQ::release_echo() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:PacketLib.UG_ECHO_REQ.echo)
  return _impl_.echo_.Release();
}
inline void UG_ECHO_REQ::set_allocated_echo(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.echo_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.echo_.IsDefault()) {
          _impl_.echo_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PacketLib.UG_ECHO_REQ.echo)
}

// -------------------------------------------------------------------

// GU_ECHO_RES

// string echo = 1;
inline void GU_ECHO_RES::clear_echo() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.echo_.ClearToEmpty();
}
inline const std::string& GU_ECHO_RES::echo() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PacketLib.GU_ECHO_RES.echo)
  return _internal_echo();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GU_ECHO_RES::set_echo(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.echo_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:PacketLib.GU_ECHO_RES.echo)
}
inline std::string* GU_ECHO_RES::mutable_echo() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_echo();
  // @@protoc_insertion_point(field_mutable:PacketLib.GU_ECHO_RES.echo)
  return _s;
}
inline const std::string& GU_ECHO_RES::_internal_echo() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.echo_.Get();
}
inline void GU_ECHO_RES::_internal_set_echo(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.echo_.Set(value, GetArena());
}
inline std::string* GU_ECHO_RES::_internal_mutable_echo() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.echo_.Mutable( GetArena());
}
inline std::string* GU_ECHO_RES::release_echo() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:PacketLib.GU_ECHO_RES.echo)
  return _impl_.echo_.Release();
}
inline void GU_ECHO_RES::set_allocated_echo(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.echo_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.echo_.IsDefault()) {
          _impl_.echo_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PacketLib.GU_ECHO_RES.echo)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace PacketLib


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::PacketLib::PACKET_ID> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::PacketLib::PACKET_ID>() {
  return ::PacketLib::PACKET_ID_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_packet_2eproto_2epb_2eh
